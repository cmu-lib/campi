# Generated by Django 3.0.6 on 2020-05-29 16:41

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('photograph', '0001_initial'),
        ('cv', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SimilarityMatchRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date created (automatically recorded)')),
                ('last_updated', models.DateField(auto_now=True, db_index=True, help_text='Date last modified (automatically recorded)')),
                ('max_neighbors', models.PositiveIntegerField(default=20, help_text='Number of nearest neighbors to request from the index.')),
                ('cutoff_distance', models.FloatField(help_text='Photographs returned from the index query farther away from the photograph will be excluded.')),
            ],
        ),
        migrations.CreateModel(
            name='SimilarityMatchSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date created (automatically recorded)')),
                ('last_updated', models.DateField(auto_now=True, db_index=True, help_text='Date last modified (automatically recorded)')),
                ('seed_photograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seeded_similarity_match_sets', to='photograph.Photograph')),
                ('similarity_match_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_match_sets', to='cv.SimilarityMatchRun')),
            ],
            options={
                'unique_together': {('similarity_match_run', 'seed_photograph')},
            },
        ),
        migrations.AddField(
            model_name='pytorchmodel',
            name='created_on',
            field=models.DateTimeField(auto_now_add=True, db_index=True, default=datetime.datetime.now, help_text='Date created (automatically recorded)'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='pytorchmodel',
            name='last_updated',
            field=models.DateField(auto_now=True, db_index=True, help_text='Date last modified (automatically recorded)'),
        ),
        migrations.AlterUniqueTogether(
            name='annoyidx',
            unique_together={('pytorch_model', 'n_trees')},
        ),
        migrations.AddField(
            model_name='similaritymatchrun',
            name='annoy_idx',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_match_runs', to='cv.AnnoyIdx'),
        ),
        migrations.AddField(
            model_name='similaritymatchrun',
            name='pytorch_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_match_runs', to='cv.PyTorchModel'),
        ),
        migrations.CreateModel(
            name='SimilarityMatchSetMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('photograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_match_memberships', to='photograph.Photograph')),
                ('similarity_match_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='cv.SimilarityMatchSet')),
            ],
            options={
                'unique_together': {('similarity_match_set', 'photograph')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='similaritymatchrun',
            unique_together={('pytorch_model', 'annoy_idx', 'max_neighbors', 'cutoff_distance')},
        ),
    ]
